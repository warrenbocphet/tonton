// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localisation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localisation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localisation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localisation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localisation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localisation_2eproto;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::SensorData* Arena::CreateMaybeMessage<::SensorData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SensorData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() override;
  explicit PROTOBUF_CONSTEXPR SensorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SensorData& from) {
    SensorData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorData";
  }
  protected:
  explicit SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kHeadingFieldNumber = 3,
  };
  // repeated double time = 1;
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  private:
  double _internal_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_time() const;
  void _internal_add_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_time();
  public:
  double time(int index) const;
  void set_time(int index, double value);
  void add_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_time();

  // repeated double radius = 2;
  int radius_size() const;
  private:
  int _internal_radius_size() const;
  public:
  void clear_radius();
  private:
  double _internal_radius(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_radius() const;
  void _internal_add_radius(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_radius();
  public:
  double radius(int index) const;
  void set_radius(int index, double value);
  void add_radius(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      radius() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_radius();

  // repeated double heading = 3;
  int heading_size() const;
  private:
  int _internal_heading_size() const;
  public:
  void clear_heading();
  private:
  double _internal_heading(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_heading() const;
  void _internal_add_heading(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_heading();
  public:
  double heading(int index) const;
  void set_heading(int index, double value);
  void add_heading(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      heading() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_heading();

  // @@protoc_insertion_point(class_scope:SensorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > radius_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > heading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localisation_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_localisation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorData

// repeated double time = 1;
inline int SensorData::_internal_time_size() const {
  return _impl_.time_.size();
}
inline int SensorData::time_size() const {
  return _internal_time_size();
}
inline void SensorData::clear_time() {
  _impl_.time_.Clear();
}
inline double SensorData::_internal_time(int index) const {
  return _impl_.time_.Get(index);
}
inline double SensorData::time(int index) const {
  // @@protoc_insertion_point(field_get:SensorData.time)
  return _internal_time(index);
}
inline void SensorData::set_time(int index, double value) {
  _impl_.time_.Set(index, value);
  // @@protoc_insertion_point(field_set:SensorData.time)
}
inline void SensorData::_internal_add_time(double value) {
  _impl_.time_.Add(value);
}
inline void SensorData::add_time(double value) {
  _internal_add_time(value);
  // @@protoc_insertion_point(field_add:SensorData.time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::_internal_time() const {
  return _impl_.time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::time() const {
  // @@protoc_insertion_point(field_list:SensorData.time)
  return _internal_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::_internal_mutable_time() {
  return &_impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:SensorData.time)
  return _internal_mutable_time();
}

// repeated double radius = 2;
inline int SensorData::_internal_radius_size() const {
  return _impl_.radius_.size();
}
inline int SensorData::radius_size() const {
  return _internal_radius_size();
}
inline void SensorData::clear_radius() {
  _impl_.radius_.Clear();
}
inline double SensorData::_internal_radius(int index) const {
  return _impl_.radius_.Get(index);
}
inline double SensorData::radius(int index) const {
  // @@protoc_insertion_point(field_get:SensorData.radius)
  return _internal_radius(index);
}
inline void SensorData::set_radius(int index, double value) {
  _impl_.radius_.Set(index, value);
  // @@protoc_insertion_point(field_set:SensorData.radius)
}
inline void SensorData::_internal_add_radius(double value) {
  _impl_.radius_.Add(value);
}
inline void SensorData::add_radius(double value) {
  _internal_add_radius(value);
  // @@protoc_insertion_point(field_add:SensorData.radius)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::_internal_radius() const {
  return _impl_.radius_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::radius() const {
  // @@protoc_insertion_point(field_list:SensorData.radius)
  return _internal_radius();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::_internal_mutable_radius() {
  return &_impl_.radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::mutable_radius() {
  // @@protoc_insertion_point(field_mutable_list:SensorData.radius)
  return _internal_mutable_radius();
}

// repeated double heading = 3;
inline int SensorData::_internal_heading_size() const {
  return _impl_.heading_.size();
}
inline int SensorData::heading_size() const {
  return _internal_heading_size();
}
inline void SensorData::clear_heading() {
  _impl_.heading_.Clear();
}
inline double SensorData::_internal_heading(int index) const {
  return _impl_.heading_.Get(index);
}
inline double SensorData::heading(int index) const {
  // @@protoc_insertion_point(field_get:SensorData.heading)
  return _internal_heading(index);
}
inline void SensorData::set_heading(int index, double value) {
  _impl_.heading_.Set(index, value);
  // @@protoc_insertion_point(field_set:SensorData.heading)
}
inline void SensorData::_internal_add_heading(double value) {
  _impl_.heading_.Add(value);
}
inline void SensorData::add_heading(double value) {
  _internal_add_heading(value);
  // @@protoc_insertion_point(field_add:SensorData.heading)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::_internal_heading() const {
  return _impl_.heading_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SensorData::heading() const {
  // @@protoc_insertion_point(field_list:SensorData.heading)
  return _internal_heading();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::_internal_mutable_heading() {
  return &_impl_.heading_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SensorData::mutable_heading() {
  // @@protoc_insertion_point(field_mutable_list:SensorData.heading)
  return _internal_mutable_heading();
}

// -------------------------------------------------------------------

// Command

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localisation_2eproto
