// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: localisation.proto

#include "localisation.pb.h"
#include "localisation.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Localisation_method_names[] = {
  "/Localisation/Communicate",
};

std::unique_ptr< Localisation::Stub> Localisation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Localisation::Stub> stub(new Localisation::Stub(channel, options));
  return stub;
}

Localisation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Communicate_(Localisation_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::SensorData, ::Command>* Localisation::Stub::CommunicateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::SensorData, ::Command>::Create(channel_.get(), rpcmethod_Communicate_, context);
}

void Localisation::Stub::async::Communicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SensorData,::Command>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::SensorData,::Command>::Create(stub_->channel_.get(), stub_->rpcmethod_Communicate_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::SensorData, ::Command>* Localisation::Stub::AsyncCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::SensorData, ::Command>::Create(channel_.get(), cq, rpcmethod_Communicate_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::SensorData, ::Command>* Localisation::Stub::PrepareAsyncCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::SensorData, ::Command>::Create(channel_.get(), cq, rpcmethod_Communicate_, context, false, nullptr);
}

Localisation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Localisation_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Localisation::Service, ::SensorData, ::Command>(
          [](Localisation::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Command,
             ::SensorData>* stream) {
               return service->Communicate(ctx, stream);
             }, this)));
}

Localisation::Service::~Service() {
}

::grpc::Status Localisation::Service::Communicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Command, ::SensorData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


